
SET statement_timeout = 0;
SET lock_timeout = 0;
SET idle_in_transaction_session_timeout = 0;
SET client_encoding = 'UTF8';
SET standard_conforming_strings = on;
SELECT pg_catalog.set_config('search_path', '', false);
SET check_function_bodies = false;
SET xmloption = content;
SET client_min_messages = warning;
SET row_security = off;

CREATE EXTENSION IF NOT EXISTS "pg_net" WITH SCHEMA "extensions";

CREATE EXTENSION IF NOT EXISTS "pgsodium" WITH SCHEMA "pgsodium";

COMMENT ON SCHEMA "public" IS 'standard public schema';

CREATE EXTENSION IF NOT EXISTS "pg_graphql" WITH SCHEMA "graphql";

CREATE EXTENSION IF NOT EXISTS "pg_stat_statements" WITH SCHEMA "extensions";

CREATE EXTENSION IF NOT EXISTS "pgcrypto" WITH SCHEMA "extensions";

CREATE EXTENSION IF NOT EXISTS "pgjwt" WITH SCHEMA "extensions";

CREATE EXTENSION IF NOT EXISTS "supabase_vault" WITH SCHEMA "vault";

CREATE EXTENSION IF NOT EXISTS "uuid-ossp" WITH SCHEMA "extensions";

CREATE TYPE "public"."interval_type" AS ENUM (
    'SCHEDULED',
    'BY_MEMBER'
);

ALTER TYPE "public"."interval_type" OWNER TO "postgres";

CREATE TYPE "public"."role" AS ENUM (
    'ADMIN',
    'MODERATOR',
    'MEMBER'
);

ALTER TYPE "public"."role" OWNER TO "postgres";

CREATE OR REPLACE FUNCTION "public"."create_profile_upon_new_user"() RETURNS "trigger"
    LANGUAGE "plpgsql" SECURITY DEFINER
    AS $$BEGIN
  INSERT INTO public.profiles(name, theme, first_name, last_name, user_id, email)
  VALUES (
    NEW.raw_user_meta_data->>'name', 
    'dark', 
    NEW.raw_user_meta_data->>'first_name', 
    NEW.raw_user_meta_data->>'last_name', 
    NEW.id, 
    NEW.email
  );

  RETURN NEW;
END;$$;

ALTER FUNCTION "public"."create_profile_upon_new_user"() OWNER TO "postgres";

CREATE OR REPLACE FUNCTION "public"."get_member_club_id"("_member_id" bigint) RETURNS bigint
    LANGUAGE "plpgsql" SECURITY DEFINER
    AS $$begin
  return (select club_id from public.members where id = _member_id);
end;$$;

ALTER FUNCTION "public"."get_member_club_id"("_member_id" bigint) OWNER TO "postgres";

CREATE OR REPLACE FUNCTION "public"."get_member_role"("_member_id" bigint) RETURNS "text"
    LANGUAGE "plpgsql" SECURITY DEFINER
    AS $$declare
  res public.role;

begin
  select role into res from public.member_roles where member_id = _member_id;

  return res;

end;$$;

ALTER FUNCTION "public"."get_member_role"("_member_id" bigint) OWNER TO "postgres";

CREATE OR REPLACE FUNCTION "public"."get_user_club_role"("_club_id" bigint) RETURNS "text"
    LANGUAGE "plpgsql" SECURITY DEFINER
    AS $$declare
  _profile_id int8;
  _member_id int8;
begin
  select get_user_profile_id() into _profile_id;
  select id into _member_id from public.members where (club_id = _club_id) and (user_profile_id = _profile_id);
  return get_member_role(_member_id);
end;$$;

ALTER FUNCTION "public"."get_user_club_role"("_club_id" bigint) OWNER TO "postgres";

CREATE OR REPLACE FUNCTION "public"."get_user_profile_id"() RETURNS bigint
    LANGUAGE "plpgsql" SECURITY DEFINER
    AS $$declare
  res int8;
begin
  select id into res from public.profiles where user_id = (select auth.uid());
  return res;
end;$$;

ALTER FUNCTION "public"."get_user_profile_id"() OWNER TO "postgres";

CREATE OR REPLACE FUNCTION "public"."user_and_member_in_same_club"("_member_id" bigint) RETURNS boolean
    LANGUAGE "plpgsql" SECURITY DEFINER
    AS $$begin
  return get_user_profile_id() in (select user_profile_id from public.members where club_id in (select m2.club_id from public.members m2 where m2.id = _member_id));
end;$$;

ALTER FUNCTION "public"."user_and_member_in_same_club"("_member_id" bigint) OWNER TO "postgres";

CREATE OR REPLACE FUNCTION "public"."user_is_member"("_member_id" bigint) RETURNS boolean
    LANGUAGE "plpgsql" SECURITY DEFINER
    AS $$begin
return exists (select 1 from public.members where user_profile_id = get_user_profile_id() and id = _member_id);
end;$$;

ALTER FUNCTION "public"."user_is_member"("_member_id" bigint) OWNER TO "postgres";

SET default_tablespace = '';

SET default_table_access_method = "heap";

CREATE TABLE IF NOT EXISTS "public"."books" (
    "id" bigint NOT NULL,
    "created_at" timestamp with time zone DEFAULT "now"() NOT NULL,
    "title" "text" NOT NULL,
    "authors" "text"[],
    "page_count" bigint NOT NULL,
    "image_url" "text",
    "image_width" bigint,
    "image_height" bigint,
    "open_library_id" "text" NOT NULL,
    "creator_member_id" bigint NOT NULL
);

ALTER TABLE "public"."books" OWNER TO "postgres";

ALTER TABLE "public"."books" ALTER COLUMN "id" ADD GENERATED BY DEFAULT AS IDENTITY (
    SEQUENCE NAME "public"."books_id_seq"
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1
);

CREATE TABLE IF NOT EXISTS "public"."club_invite_codes" (
    "id" bigint NOT NULL,
    "club_id" bigint NOT NULL,
    "code" "uuid" DEFAULT "gen_random_uuid"() NOT NULL,
    "expiration_date" timestamp with time zone,
    "created_at" timestamp with time zone DEFAULT "now"() NOT NULL
);

ALTER TABLE "public"."club_invite_codes" OWNER TO "postgres";

ALTER TABLE "public"."club_invite_codes" ALTER COLUMN "id" ADD GENERATED BY DEFAULT AS IDENTITY (
    SEQUENCE NAME "public"."club_invite_codes_id_seq"
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1
);

CREATE TABLE IF NOT EXISTS "public"."clubs" (
    "id" bigint NOT NULL,
    "created_at" timestamp with time zone DEFAULT "now"() NOT NULL,
    "name" "text" NOT NULL,
    "description" "text",
    "creator_profile_id" bigint NOT NULL,
    "last_edited_by_member_id" bigint
);

ALTER TABLE "public"."clubs" OWNER TO "postgres";

ALTER TABLE "public"."clubs" ALTER COLUMN "id" ADD GENERATED BY DEFAULT AS IDENTITY (
    SEQUENCE NAME "public"."clubs_id_seq"
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1
);

CREATE TABLE IF NOT EXISTS "public"."comments" (
    "id" bigint NOT NULL,
    "parent_post_id" bigint,
    "content" "text" NOT NULL,
    "created_at" timestamp with time zone DEFAULT "now"() NOT NULL,
    "updated_at" timestamp with time zone DEFAULT "now"() NOT NULL,
    "parent_comment_id" bigint,
    "author_member_id" bigint NOT NULL,
    "likes" bigint DEFAULT '0'::bigint NOT NULL
);

ALTER TABLE "public"."comments" OWNER TO "postgres";

ALTER TABLE "public"."comments" ALTER COLUMN "id" ADD GENERATED BY DEFAULT AS IDENTITY (
    SEQUENCE NAME "public"."comments_id_seq"
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1
);

CREATE TABLE IF NOT EXISTS "public"."intervals" (
    "id" bigint NOT NULL,
    "created_at" timestamp with time zone DEFAULT "now"() NOT NULL,
    "updated_at" timestamp with time zone DEFAULT "now"() NOT NULL,
    "member_id" bigint NOT NULL,
    "reading_id" bigint NOT NULL,
    "is_completed" boolean DEFAULT false NOT NULL,
    "is_current" boolean DEFAULT true NOT NULL
);

ALTER TABLE "public"."intervals" OWNER TO "postgres";

ALTER TABLE "public"."intervals" ALTER COLUMN "id" ADD GENERATED BY DEFAULT AS IDENTITY (
    SEQUENCE NAME "public"."intervals_id_seq"
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1
);

CREATE TABLE IF NOT EXISTS "public"."member_roles" (
    "id" bigint NOT NULL,
    "created_at" timestamp with time zone DEFAULT "now"() NOT NULL,
    "member_id" bigint NOT NULL,
    "role" "public"."role" DEFAULT 'MEMBER'::"public"."role" NOT NULL,
    "last_edited_by_member_id" bigint
);

ALTER TABLE "public"."member_roles" OWNER TO "postgres";

ALTER TABLE "public"."member_roles" ALTER COLUMN "id" ADD GENERATED BY DEFAULT AS IDENTITY (
    SEQUENCE NAME "public"."member_roles_id_seq"
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1
);

CREATE TABLE IF NOT EXISTS "public"."members" (
    "id" bigint NOT NULL,
    "created_at" timestamp with time zone DEFAULT "now"() NOT NULL,
    "club_id" bigint NOT NULL,
    "favorite" boolean DEFAULT false NOT NULL,
    "reading_tab_index" bigint DEFAULT '0'::bigint,
    "user_profile_id" bigint NOT NULL
);

ALTER TABLE "public"."members" OWNER TO "postgres";

ALTER TABLE "public"."members" ALTER COLUMN "id" ADD GENERATED BY DEFAULT AS IDENTITY (
    SEQUENCE NAME "public"."members_id_seq"
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1
);

CREATE TABLE IF NOT EXISTS "public"."posts" (
    "id" bigint NOT NULL,
    "created_at" timestamp with time zone DEFAULT "now"() NOT NULL,
    "updated_at" timestamp with time zone DEFAULT "now"() NOT NULL,
    "reading_id" bigint NOT NULL,
    "title" "text" NOT NULL,
    "content" "text" NOT NULL,
    "likes" bigint DEFAULT '0'::bigint NOT NULL,
    "is_spoiler" boolean DEFAULT false NOT NULL,
    "last_edited_by_member_id" bigint,
    "author_member_id" bigint NOT NULL
);

ALTER TABLE "public"."posts" OWNER TO "postgres";

ALTER TABLE "public"."posts" ALTER COLUMN "id" ADD GENERATED BY DEFAULT AS IDENTITY (
    SEQUENCE NAME "public"."posts_id_seq"
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1
);

CREATE TABLE IF NOT EXISTS "public"."profiles" (
    "id" bigint NOT NULL,
    "created_at" timestamp with time zone DEFAULT "now"() NOT NULL,
    "name" "text",
    "theme" "text" DEFAULT 'dark'::"text" NOT NULL,
    "first_name" "text",
    "last_name" "text",
    "user_id" "uuid" NOT NULL,
    "email" "text" NOT NULL
);

ALTER TABLE "public"."profiles" OWNER TO "postgres";

ALTER TABLE "public"."profiles" ALTER COLUMN "id" ADD GENERATED BY DEFAULT AS IDENTITY (
    SEQUENCE NAME "public"."profiles_id_seq"
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1
);

CREATE TABLE IF NOT EXISTS "public"."readings" (
    "id" bigint NOT NULL,
    "created_at" timestamp with time zone DEFAULT "now"() NOT NULL,
    "club_id" bigint NOT NULL,
    "book_id" bigint NOT NULL,
    "current_page" bigint DEFAULT '0'::bigint NOT NULL,
    "is_finished" boolean DEFAULT false NOT NULL,
    "is_current" boolean DEFAULT false NOT NULL,
    "interval_start_date" timestamp with time zone DEFAULT "now"() NOT NULL,
    "interval_days" bigint DEFAULT '7'::bigint NOT NULL,
    "interval_pages" bigint DEFAULT '10'::bigint NOT NULL,
    "interval_type" "public"."interval_type" NOT NULL,
    "creator_member_id" bigint NOT NULL,
    "last_edited_by_member_id" bigint
);

ALTER TABLE "public"."readings" OWNER TO "postgres";

ALTER TABLE "public"."readings" ALTER COLUMN "id" ADD GENERATED BY DEFAULT AS IDENTITY (
    SEQUENCE NAME "public"."readings_id_seq"
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1
);

ALTER TABLE ONLY "public"."books"
    ADD CONSTRAINT "books_olid_key" UNIQUE ("open_library_id");

ALTER TABLE ONLY "public"."books"
    ADD CONSTRAINT "books_pkey" PRIMARY KEY ("id");

ALTER TABLE ONLY "public"."club_invite_codes"
    ADD CONSTRAINT "club_invite_codes_pkey" PRIMARY KEY ("id");

ALTER TABLE ONLY "public"."clubs"
    ADD CONSTRAINT "clubs_pkey" PRIMARY KEY ("id");

ALTER TABLE ONLY "public"."comments"
    ADD CONSTRAINT "comments_pkey" PRIMARY KEY ("id");

ALTER TABLE ONLY "public"."intervals"
    ADD CONSTRAINT "intervals_pkey" PRIMARY KEY ("id");

ALTER TABLE ONLY "public"."member_roles"
    ADD CONSTRAINT "member_roles_member_id_key" UNIQUE ("member_id");

ALTER TABLE ONLY "public"."member_roles"
    ADD CONSTRAINT "member_roles_pkey" PRIMARY KEY ("id");

ALTER TABLE ONLY "public"."members"
    ADD CONSTRAINT "members_pkey" PRIMARY KEY ("id");

ALTER TABLE ONLY "public"."posts"
    ADD CONSTRAINT "posts_pkey" PRIMARY KEY ("id");

ALTER TABLE ONLY "public"."profiles"
    ADD CONSTRAINT "profiles_email_key" UNIQUE ("email");

ALTER TABLE ONLY "public"."profiles"
    ADD CONSTRAINT "profiles_user_id_key" UNIQUE ("user_id");

ALTER TABLE ONLY "public"."readings"
    ADD CONSTRAINT "readings_pkey" PRIMARY KEY ("id");

ALTER TABLE ONLY "public"."profiles"
    ADD CONSTRAINT "users_pkey" PRIMARY KEY ("id");

ALTER TABLE ONLY "public"."books"
    ADD CONSTRAINT "books_creator_member_id_fkey" FOREIGN KEY ("creator_member_id") REFERENCES "public"."members"("id") ON UPDATE CASCADE ON DELETE CASCADE;

ALTER TABLE ONLY "public"."club_invite_codes"
    ADD CONSTRAINT "club_invite_codes_club_id_fkey" FOREIGN KEY ("club_id") REFERENCES "public"."clubs"("id") ON UPDATE CASCADE ON DELETE CASCADE;

ALTER TABLE ONLY "public"."clubs"
    ADD CONSTRAINT "clubs_creator_profile_id_fkey" FOREIGN KEY ("creator_profile_id") REFERENCES "public"."profiles"("id") ON UPDATE CASCADE ON DELETE CASCADE;

ALTER TABLE ONLY "public"."clubs"
    ADD CONSTRAINT "clubs_last_edited_by_member_id_fkey" FOREIGN KEY ("last_edited_by_member_id") REFERENCES "public"."members"("id") ON UPDATE CASCADE ON DELETE CASCADE;

ALTER TABLE ONLY "public"."comments"
    ADD CONSTRAINT "comments_author_member_id_fkey" FOREIGN KEY ("author_member_id") REFERENCES "public"."members"("id") ON UPDATE CASCADE ON DELETE CASCADE;

ALTER TABLE ONLY "public"."comments"
    ADD CONSTRAINT "comments_parent_comment_id_fkey" FOREIGN KEY ("parent_comment_id") REFERENCES "public"."comments"("id") ON UPDATE CASCADE ON DELETE CASCADE;

ALTER TABLE ONLY "public"."comments"
    ADD CONSTRAINT "comments_parent_post_id_fkey" FOREIGN KEY ("parent_post_id") REFERENCES "public"."posts"("id") ON UPDATE CASCADE ON DELETE CASCADE;

ALTER TABLE ONLY "public"."intervals"
    ADD CONSTRAINT "intervals_member_id_fkey" FOREIGN KEY ("member_id") REFERENCES "public"."members"("id") ON UPDATE CASCADE ON DELETE CASCADE;

ALTER TABLE ONLY "public"."intervals"
    ADD CONSTRAINT "intervals_reading_id_fkey" FOREIGN KEY ("reading_id") REFERENCES "public"."readings"("id") ON UPDATE CASCADE ON DELETE CASCADE;

ALTER TABLE ONLY "public"."member_roles"
    ADD CONSTRAINT "member_roles_last_edited_by_member_id_fkey" FOREIGN KEY ("last_edited_by_member_id") REFERENCES "public"."members"("id") ON UPDATE CASCADE ON DELETE CASCADE;

ALTER TABLE ONLY "public"."member_roles"
    ADD CONSTRAINT "member_roles_member_id_fkey" FOREIGN KEY ("member_id") REFERENCES "public"."members"("id") ON UPDATE CASCADE ON DELETE CASCADE;

ALTER TABLE ONLY "public"."members"
    ADD CONSTRAINT "members_club_id_fkey" FOREIGN KEY ("club_id") REFERENCES "public"."clubs"("id") ON UPDATE CASCADE ON DELETE CASCADE;

ALTER TABLE ONLY "public"."members"
    ADD CONSTRAINT "members_user_profile_id_fkey" FOREIGN KEY ("user_profile_id") REFERENCES "public"."profiles"("id") ON UPDATE CASCADE ON DELETE CASCADE;

ALTER TABLE ONLY "public"."posts"
    ADD CONSTRAINT "posts_author_member_id_fkey" FOREIGN KEY ("author_member_id") REFERENCES "public"."members"("id") ON UPDATE CASCADE ON DELETE CASCADE;

ALTER TABLE ONLY "public"."posts"
    ADD CONSTRAINT "posts_last_edited_by_member_id_fkey" FOREIGN KEY ("last_edited_by_member_id") REFERENCES "public"."members"("id") ON UPDATE CASCADE ON DELETE CASCADE;

ALTER TABLE ONLY "public"."posts"
    ADD CONSTRAINT "posts_reading_id_fkey" FOREIGN KEY ("reading_id") REFERENCES "public"."readings"("id") ON UPDATE CASCADE ON DELETE CASCADE;

ALTER TABLE ONLY "public"."profiles"
    ADD CONSTRAINT "profiles_user_id_fkey" FOREIGN KEY ("user_id") REFERENCES "auth"."users"("id") ON UPDATE CASCADE ON DELETE CASCADE;

ALTER TABLE ONLY "public"."readings"
    ADD CONSTRAINT "readings_book_id_fkey" FOREIGN KEY ("book_id") REFERENCES "public"."books"("id") ON UPDATE CASCADE ON DELETE CASCADE;

ALTER TABLE ONLY "public"."readings"
    ADD CONSTRAINT "readings_club_id_fkey" FOREIGN KEY ("club_id") REFERENCES "public"."clubs"("id") ON UPDATE CASCADE ON DELETE CASCADE;

ALTER TABLE ONLY "public"."readings"
    ADD CONSTRAINT "readings_creator_member_id_fkey" FOREIGN KEY ("creator_member_id") REFERENCES "public"."members"("id") ON UPDATE CASCADE ON DELETE CASCADE;

ALTER TABLE ONLY "public"."readings"
    ADD CONSTRAINT "readings_last_edited_by_member_id_fkey" FOREIGN KEY ("last_edited_by_member_id") REFERENCES "public"."members"("id") ON UPDATE CASCADE ON DELETE CASCADE;

CREATE POLICY "Admins can create books" ON "public"."books" FOR INSERT TO "authenticated" WITH CHECK (("public"."get_member_role"("creator_member_id") = 'ADMIN'::"text"));

CREATE POLICY "Admins can create readings" ON "public"."readings" FOR INSERT TO "authenticated" WITH CHECK (("public"."user_is_member"("creator_member_id") AND ("public"."get_user_club_role"("public"."get_member_club_id"("creator_member_id")) = 'ADMIN'::"text") AND ("club_id" = "public"."get_member_club_id"("creator_member_id"))));

CREATE POLICY "Admins can edit readings" ON "public"."readings" FOR UPDATE TO "authenticated" USING (("public"."user_is_member"("last_edited_by_member_id") AND ("public"."get_user_club_role"("public"."get_member_club_id"("last_edited_by_member_id")) = 'ADMIN'::"text") AND ("club_id" = "public"."get_member_club_id"("last_edited_by_member_id"))));

CREATE POLICY "Admins can edit their clubs" ON "public"."clubs" FOR UPDATE TO "authenticated" USING ((("public"."get_member_role"("last_edited_by_member_id") = 'ADMIN'::"text") AND "public"."user_is_member"("last_edited_by_member_id")));

CREATE POLICY "Creators can delete their own clubs" ON "public"."clubs" FOR DELETE TO "authenticated" USING (("creator_profile_id" IN ( SELECT "profiles"."id"
   FROM "public"."profiles"
  WHERE ("profiles"."user_id" = ( SELECT "auth"."uid"() AS "uid")))));

CREATE POLICY "Members can create comments" ON "public"."comments" FOR INSERT TO "authenticated" WITH CHECK (("public"."user_and_member_in_same_club"("author_member_id") AND (EXISTS ( SELECT 1
   FROM "public"."members"
  WHERE (("members"."id" = "comments"."author_member_id") AND ("members"."user_profile_id" = "public"."get_user_profile_id"()))))));

CREATE POLICY "Members can create posts" ON "public"."posts" FOR INSERT TO "authenticated" WITH CHECK (("public"."user_and_member_in_same_club"("author_member_id") AND (EXISTS ( SELECT 1
   FROM "public"."members"
  WHERE (("members"."id" = "posts"."author_member_id") AND ("members"."user_profile_id" = "public"."get_user_profile_id"()))))));

CREATE POLICY "Members can delete their own comments" ON "public"."comments" FOR DELETE TO "authenticated" USING (("public"."user_and_member_in_same_club"("author_member_id") AND (EXISTS ( SELECT 1
   FROM "public"."members"
  WHERE (("members"."id" = "comments"."author_member_id") AND ("members"."user_profile_id" = "public"."get_user_profile_id"()))))));

CREATE POLICY "Members can delete their own posts" ON "public"."posts" FOR DELETE TO "authenticated" USING (("public"."user_and_member_in_same_club"("author_member_id") AND "public"."user_is_member"("author_member_id")));

CREATE POLICY "Members can edit their own comments" ON "public"."comments" FOR UPDATE TO "authenticated" USING (("public"."user_and_member_in_same_club"("author_member_id") AND (EXISTS ( SELECT 1
   FROM "public"."members"
  WHERE (("members"."id" = "comments"."author_member_id") AND ("members"."user_profile_id" = "public"."get_user_profile_id"()))))));

CREATE POLICY "Members can edit their own posts" ON "public"."posts" FOR UPDATE TO "authenticated" USING (("public"."user_and_member_in_same_club"("author_member_id") AND "public"."user_is_member"("last_edited_by_member_id")));

CREATE POLICY "Members can see other members' comments" ON "public"."comments" FOR SELECT TO "authenticated" USING ("public"."user_and_member_in_same_club"("author_member_id"));

CREATE POLICY "Members can see other members' posts" ON "public"."posts" FOR SELECT TO "authenticated" USING ("public"."user_and_member_in_same_club"("author_member_id"));

CREATE POLICY "Members can see other members' roles" ON "public"."member_roles" FOR SELECT TO "authenticated" USING ("public"."user_and_member_in_same_club"("member_id"));

CREATE POLICY "Members can view other members' intervals" ON "public"."intervals" FOR SELECT TO "authenticated" USING ("public"."user_and_member_in_same_club"("member_id"));

CREATE POLICY "Moderators can delete comments" ON "public"."comments" FOR DELETE TO "authenticated" USING (("public"."user_and_member_in_same_club"("author_member_id") AND (("public"."get_user_club_role"("public"."get_member_club_id"("author_member_id")) = 'MODERATOR'::"text") OR ("public"."get_user_club_role"("public"."get_member_club_id"("author_member_id")) = 'ADMIN'::"text"))));

CREATE POLICY "Moderators can delete posts" ON "public"."posts" FOR DELETE TO "authenticated" USING (("public"."user_and_member_in_same_club"("author_member_id") AND (("public"."get_user_club_role"("public"."get_member_club_id"("author_member_id")) = 'MODERATOR'::"text") OR ("public"."get_user_club_role"("public"."get_member_club_id"("author_member_id")) = 'ADMIN'::"text"))));

CREATE POLICY "Moderators can edit posts" ON "public"."posts" FOR UPDATE TO "authenticated" USING (("public"."user_and_member_in_same_club"("author_member_id") AND (("public"."get_member_role"("last_edited_by_member_id") = 'ADMIN'::"text") OR ("public"."get_member_role"("last_edited_by_member_id") = 'MODERATOR'::"text")) AND "public"."user_is_member"("last_edited_by_member_id")));

CREATE POLICY "Users can create clubs" ON "public"."clubs" FOR INSERT TO "authenticated" WITH CHECK (true);

CREATE POLICY "Users can see all memberships" ON "public"."members" FOR SELECT TO "authenticated" USING (true);

CREATE POLICY "Users can see all profiles" ON "public"."profiles" FOR SELECT TO "authenticated" USING (true);

CREATE POLICY "Users can update their own profiles" ON "public"."profiles" FOR UPDATE TO "authenticated" USING (("user_id" = ( SELECT "auth"."uid"() AS "uid")));

CREATE POLICY "Users can view all books" ON "public"."books" FOR SELECT TO "authenticated" USING (true);

CREATE POLICY "Users can view all clubs" ON "public"."clubs" FOR SELECT TO "authenticated" USING (true);

ALTER TABLE "public"."books" ENABLE ROW LEVEL SECURITY;

ALTER TABLE "public"."club_invite_codes" ENABLE ROW LEVEL SECURITY;

ALTER TABLE "public"."clubs" ENABLE ROW LEVEL SECURITY;

ALTER TABLE "public"."comments" ENABLE ROW LEVEL SECURITY;

ALTER TABLE "public"."intervals" ENABLE ROW LEVEL SECURITY;

ALTER TABLE "public"."member_roles" ENABLE ROW LEVEL SECURITY;

ALTER TABLE "public"."members" ENABLE ROW LEVEL SECURITY;

ALTER TABLE "public"."posts" ENABLE ROW LEVEL SECURITY;

ALTER TABLE "public"."profiles" ENABLE ROW LEVEL SECURITY;

ALTER TABLE "public"."readings" ENABLE ROW LEVEL SECURITY;

ALTER PUBLICATION "supabase_realtime" OWNER TO "postgres";

GRANT USAGE ON SCHEMA "public" TO "postgres";
GRANT USAGE ON SCHEMA "public" TO "anon";
GRANT USAGE ON SCHEMA "public" TO "authenticated";
GRANT USAGE ON SCHEMA "public" TO "service_role";

GRANT ALL ON FUNCTION "public"."create_profile_upon_new_user"() TO "anon";
GRANT ALL ON FUNCTION "public"."create_profile_upon_new_user"() TO "authenticated";
GRANT ALL ON FUNCTION "public"."create_profile_upon_new_user"() TO "service_role";

GRANT ALL ON FUNCTION "public"."get_member_club_id"("_member_id" bigint) TO "anon";
GRANT ALL ON FUNCTION "public"."get_member_club_id"("_member_id" bigint) TO "authenticated";
GRANT ALL ON FUNCTION "public"."get_member_club_id"("_member_id" bigint) TO "service_role";

GRANT ALL ON FUNCTION "public"."get_member_role"("_member_id" bigint) TO "anon";
GRANT ALL ON FUNCTION "public"."get_member_role"("_member_id" bigint) TO "authenticated";
GRANT ALL ON FUNCTION "public"."get_member_role"("_member_id" bigint) TO "service_role";

GRANT ALL ON FUNCTION "public"."get_user_club_role"("_club_id" bigint) TO "anon";
GRANT ALL ON FUNCTION "public"."get_user_club_role"("_club_id" bigint) TO "authenticated";
GRANT ALL ON FUNCTION "public"."get_user_club_role"("_club_id" bigint) TO "service_role";

GRANT ALL ON FUNCTION "public"."get_user_profile_id"() TO "anon";
GRANT ALL ON FUNCTION "public"."get_user_profile_id"() TO "authenticated";
GRANT ALL ON FUNCTION "public"."get_user_profile_id"() TO "service_role";

GRANT ALL ON FUNCTION "public"."user_and_member_in_same_club"("_member_id" bigint) TO "anon";
GRANT ALL ON FUNCTION "public"."user_and_member_in_same_club"("_member_id" bigint) TO "authenticated";
GRANT ALL ON FUNCTION "public"."user_and_member_in_same_club"("_member_id" bigint) TO "service_role";

GRANT ALL ON FUNCTION "public"."user_is_member"("_member_id" bigint) TO "anon";
GRANT ALL ON FUNCTION "public"."user_is_member"("_member_id" bigint) TO "authenticated";
GRANT ALL ON FUNCTION "public"."user_is_member"("_member_id" bigint) TO "service_role";

GRANT ALL ON TABLE "public"."books" TO "anon";
GRANT ALL ON TABLE "public"."books" TO "authenticated";
GRANT ALL ON TABLE "public"."books" TO "service_role";

GRANT ALL ON SEQUENCE "public"."books_id_seq" TO "anon";
GRANT ALL ON SEQUENCE "public"."books_id_seq" TO "authenticated";
GRANT ALL ON SEQUENCE "public"."books_id_seq" TO "service_role";

GRANT ALL ON TABLE "public"."club_invite_codes" TO "anon";
GRANT ALL ON TABLE "public"."club_invite_codes" TO "authenticated";
GRANT ALL ON TABLE "public"."club_invite_codes" TO "service_role";

GRANT ALL ON SEQUENCE "public"."club_invite_codes_id_seq" TO "anon";
GRANT ALL ON SEQUENCE "public"."club_invite_codes_id_seq" TO "authenticated";
GRANT ALL ON SEQUENCE "public"."club_invite_codes_id_seq" TO "service_role";

GRANT ALL ON TABLE "public"."clubs" TO "anon";
GRANT ALL ON TABLE "public"."clubs" TO "authenticated";
GRANT ALL ON TABLE "public"."clubs" TO "service_role";

GRANT ALL ON SEQUENCE "public"."clubs_id_seq" TO "anon";
GRANT ALL ON SEQUENCE "public"."clubs_id_seq" TO "authenticated";
GRANT ALL ON SEQUENCE "public"."clubs_id_seq" TO "service_role";

GRANT ALL ON TABLE "public"."comments" TO "anon";
GRANT ALL ON TABLE "public"."comments" TO "authenticated";
GRANT ALL ON TABLE "public"."comments" TO "service_role";

GRANT ALL ON SEQUENCE "public"."comments_id_seq" TO "anon";
GRANT ALL ON SEQUENCE "public"."comments_id_seq" TO "authenticated";
GRANT ALL ON SEQUENCE "public"."comments_id_seq" TO "service_role";

GRANT ALL ON TABLE "public"."intervals" TO "anon";
GRANT ALL ON TABLE "public"."intervals" TO "authenticated";
GRANT ALL ON TABLE "public"."intervals" TO "service_role";

GRANT ALL ON SEQUENCE "public"."intervals_id_seq" TO "anon";
GRANT ALL ON SEQUENCE "public"."intervals_id_seq" TO "authenticated";
GRANT ALL ON SEQUENCE "public"."intervals_id_seq" TO "service_role";

GRANT ALL ON TABLE "public"."member_roles" TO "anon";
GRANT ALL ON TABLE "public"."member_roles" TO "authenticated";
GRANT ALL ON TABLE "public"."member_roles" TO "service_role";

GRANT ALL ON SEQUENCE "public"."member_roles_id_seq" TO "anon";
GRANT ALL ON SEQUENCE "public"."member_roles_id_seq" TO "authenticated";
GRANT ALL ON SEQUENCE "public"."member_roles_id_seq" TO "service_role";

GRANT ALL ON TABLE "public"."members" TO "anon";
GRANT ALL ON TABLE "public"."members" TO "authenticated";
GRANT ALL ON TABLE "public"."members" TO "service_role";

GRANT ALL ON SEQUENCE "public"."members_id_seq" TO "anon";
GRANT ALL ON SEQUENCE "public"."members_id_seq" TO "authenticated";
GRANT ALL ON SEQUENCE "public"."members_id_seq" TO "service_role";

GRANT ALL ON TABLE "public"."posts" TO "anon";
GRANT ALL ON TABLE "public"."posts" TO "authenticated";
GRANT ALL ON TABLE "public"."posts" TO "service_role";

GRANT ALL ON SEQUENCE "public"."posts_id_seq" TO "anon";
GRANT ALL ON SEQUENCE "public"."posts_id_seq" TO "authenticated";
GRANT ALL ON SEQUENCE "public"."posts_id_seq" TO "service_role";

GRANT ALL ON TABLE "public"."profiles" TO "anon";
GRANT ALL ON TABLE "public"."profiles" TO "authenticated";
GRANT ALL ON TABLE "public"."profiles" TO "service_role";

GRANT ALL ON SEQUENCE "public"."profiles_id_seq" TO "anon";
GRANT ALL ON SEQUENCE "public"."profiles_id_seq" TO "authenticated";
GRANT ALL ON SEQUENCE "public"."profiles_id_seq" TO "service_role";

GRANT ALL ON TABLE "public"."readings" TO "anon";
GRANT ALL ON TABLE "public"."readings" TO "authenticated";
GRANT ALL ON TABLE "public"."readings" TO "service_role";

GRANT ALL ON SEQUENCE "public"."readings_id_seq" TO "anon";
GRANT ALL ON SEQUENCE "public"."readings_id_seq" TO "authenticated";
GRANT ALL ON SEQUENCE "public"."readings_id_seq" TO "service_role";

ALTER DEFAULT PRIVILEGES FOR ROLE "postgres" IN SCHEMA "public" GRANT ALL ON SEQUENCES  TO "postgres";
ALTER DEFAULT PRIVILEGES FOR ROLE "postgres" IN SCHEMA "public" GRANT ALL ON SEQUENCES  TO "anon";
ALTER DEFAULT PRIVILEGES FOR ROLE "postgres" IN SCHEMA "public" GRANT ALL ON SEQUENCES  TO "authenticated";
ALTER DEFAULT PRIVILEGES FOR ROLE "postgres" IN SCHEMA "public" GRANT ALL ON SEQUENCES  TO "service_role";

ALTER DEFAULT PRIVILEGES FOR ROLE "postgres" IN SCHEMA "public" GRANT ALL ON FUNCTIONS  TO "postgres";
ALTER DEFAULT PRIVILEGES FOR ROLE "postgres" IN SCHEMA "public" GRANT ALL ON FUNCTIONS  TO "anon";
ALTER DEFAULT PRIVILEGES FOR ROLE "postgres" IN SCHEMA "public" GRANT ALL ON FUNCTIONS  TO "authenticated";
ALTER DEFAULT PRIVILEGES FOR ROLE "postgres" IN SCHEMA "public" GRANT ALL ON FUNCTIONS  TO "service_role";

ALTER DEFAULT PRIVILEGES FOR ROLE "postgres" IN SCHEMA "public" GRANT ALL ON TABLES  TO "postgres";
ALTER DEFAULT PRIVILEGES FOR ROLE "postgres" IN SCHEMA "public" GRANT ALL ON TABLES  TO "anon";
ALTER DEFAULT PRIVILEGES FOR ROLE "postgres" IN SCHEMA "public" GRANT ALL ON TABLES  TO "authenticated";
ALTER DEFAULT PRIVILEGES FOR ROLE "postgres" IN SCHEMA "public" GRANT ALL ON TABLES  TO "service_role";

RESET ALL;

--
-- Dumped schema changes for auth and storage
--

