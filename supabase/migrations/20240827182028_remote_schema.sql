drop policy "Members can create likes" on "public"."likes";

drop policy "Members can read current readings" on "public"."readings";

alter type "public"."club_permission" rename to "club_permission__old_version_to_be_dropped";

create type "public"."club_permission" as enum ('clubs.read', 'clubs.update', 'club_invite_codes.create', 'club_invite_codes.read', 'club_invite_codes.delete', 'members.read', 'members.delete', 'member_roles.read', 'member_roles.update', 'readings.create', 'readings.read', 'readings.read.all', 'readings.update', 'readings.delete', 'intervals.read', 'member_interval_progresses.read', 'member_interval_progresses.update.own', 'likes.create', 'likes.read', 'posts.create', 'posts.read', 'posts.update', 'posts.update.own', 'posts.delete', 'comments.create', 'comments.read', 'comments.update.own', 'comments.delete', 'likes.delete.own', 'posts.delete.own', 'comments.delete.own', 'members.delete.own', 'member_interval_progresses.delete.own', 'member_interval_progresses.create', 'likes.create.comment', 'likes.create.post', 'polls.read', 'polls.create', 'polls.delete', 'polls.update', 'poll_items.read', 'poll_items.create', 'poll_items.delete', 'poll_items.delete.own', 'poll_votes.create', 'poll_votes.delete.own', 'polls.read.all');

create table "public"."poll_items" (
    "id" bigint generated by default as identity not null,
    "poll_id" bigint not null,
    "created_at" timestamp with time zone not null default now(),
    "book_title" text not null,
    "book_description" text,
    "book_authors" text[],
    "book_open_library_id" text not null,
    "book_cover_image_url" text,
    "creator_member_id" bigint,
    "votes_count" bigint not null default '0'::bigint
);


alter table "public"."poll_items" enable row level security;

create table "public"."poll_votes" (
    "id" bigint generated by default as identity not null,
    "created_at" timestamp with time zone not null default now(),
    "poll_item_id" bigint not null,
    "member_id" bigint not null
);


alter table "public"."poll_votes" enable row level security;

create table "public"."polls" (
    "id" bigint generated by default as identity not null,
    "created_at" timestamp with time zone not null default now(),
    "club_id" bigint not null,
    "end_date" timestamp with time zone not null,
    "creator_member_id" bigint,
    "is_locked" boolean not null default false,
    "name" text not null,
    "description" text not null,
    "is_finished" boolean not null default false,
    "is_archived" boolean not null default false,
    "editor_member_id" bigint
);


alter table "public"."polls" enable row level security;

alter table "public"."club_permissions" alter column permission type "public"."club_permission" using permission::text::"public"."club_permission";

drop type "public"."club_permission__old_version_to_be_dropped";

CREATE UNIQUE INDEX poll_items_pkey ON public.poll_items USING btree (id);

CREATE UNIQUE INDEX poll_votes_pkey ON public.poll_votes USING btree (id);

CREATE UNIQUE INDEX polls_pkey ON public.polls USING btree (id);

alter table "public"."poll_items" add constraint "poll_items_pkey" PRIMARY KEY using index "poll_items_pkey";

alter table "public"."poll_votes" add constraint "poll_votes_pkey" PRIMARY KEY using index "poll_votes_pkey";

alter table "public"."polls" add constraint "polls_pkey" PRIMARY KEY using index "polls_pkey";

alter table "public"."poll_items" add constraint "public_poll_items_creator_member_id_fkey" FOREIGN KEY (creator_member_id) REFERENCES members(id) ON UPDATE CASCADE ON DELETE SET NULL not valid;

alter table "public"."poll_items" validate constraint "public_poll_items_creator_member_id_fkey";

alter table "public"."poll_items" add constraint "public_poll_items_poll_id_fkey" FOREIGN KEY (poll_id) REFERENCES polls(id) ON UPDATE CASCADE ON DELETE CASCADE not valid;

alter table "public"."poll_items" validate constraint "public_poll_items_poll_id_fkey";

alter table "public"."poll_votes" add constraint "public_poll_votes_member_id_fkey" FOREIGN KEY (member_id) REFERENCES members(id) ON UPDATE CASCADE ON DELETE CASCADE not valid;

alter table "public"."poll_votes" validate constraint "public_poll_votes_member_id_fkey";

alter table "public"."poll_votes" add constraint "public_poll_votes_poll_item_id_fkey" FOREIGN KEY (poll_item_id) REFERENCES poll_items(id) ON UPDATE CASCADE ON DELETE CASCADE not valid;

alter table "public"."poll_votes" validate constraint "public_poll_votes_poll_item_id_fkey";

alter table "public"."polls" add constraint "public_polls_club_id_fkey" FOREIGN KEY (club_id) REFERENCES clubs(id) ON UPDATE CASCADE ON DELETE CASCADE not valid;

alter table "public"."polls" validate constraint "public_polls_club_id_fkey";

alter table "public"."polls" add constraint "public_polls_creator_member_id_fkey" FOREIGN KEY (creator_member_id) REFERENCES members(id) ON UPDATE CASCADE ON DELETE SET NULL not valid;

alter table "public"."polls" validate constraint "public_polls_creator_member_id_fkey";

alter table "public"."polls" add constraint "public_polls_editor_member_id_fkey" FOREIGN KEY (editor_member_id) REFERENCES members(id) ON UPDATE CASCADE ON DELETE SET NULL not valid;

alter table "public"."polls" validate constraint "public_polls_editor_member_id_fkey";

set check_function_bodies = off;

CREATE OR REPLACE FUNCTION public.cls_polls(_id bigint, _created_at timestamp with time zone, _club_id bigint, _end_date timestamp with time zone, _creator_member_id bigint, _is_finished boolean)
 RETURNS boolean
 LANGUAGE plpgsql
 SECURITY DEFINER
AS $function$DECLARE
  _res BOOLEAN;
BEGIN
  WITH original_row AS (
    SELECT id, created_at, club_id, end_date, creator_member_id, is_finished
    FROM public.polls
    WHERE polls.id = _id
  )
  SELECT (
      (SELECT id FROM original_row) IS NOT DISTINCT FROM _id AND
      (SELECT created_at FROM original_row) IS NOT DISTINCT FROM _created_at AND
      (SELECT club_id FROM original_row) IS NOT DISTINCT FROM _club_id AND
      (SELECT end_date FROM original_row) IS NOT DISTINCT FROM _end_date AND
      (SELECT creator_member_id FROM original_row) IS NOT DISTINCT FROM _creator_member_id AND
      (SELECT is_finished FROM original_row) IS NOT DISTINCT FROM _is_finished AND
      EXISTS(SELECT COUNT(*) FROM original_row)
  ) INTO _res;

  return _res;
END;$function$
;

CREATE OR REPLACE FUNCTION public.handle_new_poll_vote()
 RETURNS trigger
 LANGUAGE plpgsql
 SECURITY DEFINER
AS $function$BEGIN
  UPDATE poll_items
  SET votes_count = votes_count + 1
  WHERE id = NEW.poll_item_id;

  RETURN NEW;
END;$function$
;

CREATE OR REPLACE FUNCTION public.handle_poll_vote_deletion()
 RETURNS trigger
 LANGUAGE plpgsql
 SECURITY DEFINER
AS $function$BEGIN
  UPDATE poll_items
  SET votes_count = votes_count - 1
  WHERE id = OLD.poll_item_id;

  RETURN OLD;
END;$function$
;

CREATE OR REPLACE FUNCTION public.get_club_id(_id bigint, table_name text)
 RETURNS bigint
 LANGUAGE plpgsql
 SECURITY DEFINER
AS $function$DECLARE
    _club_id bigint;
    _table text;
    _action text;
    _options text;
BEGIN
    SELECT split_part(table_name, '.', 1) INTO _table;
    SELECT split_part(table_name, '.', 2) INTO _action;
    SELECT split_part(table_name, '.', 3) INTO _options;

    --_id will be of the parent id, not the element being inserted's id. (only for insert)
    IF _action = 'create' THEN
        CASE _table
            WHEN 'club_invite_codes' THEN
                _club_id := _id;
            WHEN 'readings' THEN
                _club_id := _id;
            WHEN 'polls' THEN
                _club_id := _id;
            WHEN 'member_interval_progresses' THEN
                SELECT reading_id INTO _club_id FROM public.intervals WHERE id = _id;
                SELECT club_id INTO _club_id FROM public.readings WHERE id = _club_id;
            WHEN 'posts' THEN
                SELECT club_id INTO _club_id FROM public.readings WHERE id = _id;
            WHEN 'poll_items' THEN
                SELECT club_id INTO _club_id FROM public.polls WHERE id = _id;
            WHEN 'poll_votes' THEN
                SELECT poll_id INTO _club_id FROM public.poll_items WHERE id = _id;
                SELECT club_id INTO _club_id FROM public.polls WHERE id = _club_id;
            WHEN 'comments' THEN
                SELECT reading_id INTO _club_id FROM public.posts WHERE id = _id;
                SELECT club_id INTO _club_id FROM public.readings WHERE id = _club_id;
            WHEN 'likes' THEN
                IF _options = 'comment' THEN
                    SELECT post_id INTO _club_id FROM public.comments WHERE id = _id;
                    SELECT reading_id INTO _club_id FROM public.posts WHERE id = _club_id;
                    SELECT club_id INTO _club_id FROM public.readings WHERE id = _club_id;
                ELSE
                    SELECT reading_id INTO _club_id FROM public.posts WHERE id = _id;
                    SELECT club_id INTO _club_id FROM public.readings WHERE id = _club_id;
                END IF;
            ELSE
                RAISE EXCEPTION 'Invalid permission: %', table_name;
        END CASE;
    ELSE
        --regular id stuff
        CASE _table
            WHEN 'clubs' THEN
                SELECT _id INTO _club_id;
            WHEN 'club_invite_codes' THEN
                SELECT club_id INTO _club_id FROM public.club_invite_codes WHERE id = _id;
            WHEN 'readings' THEN
                SELECT club_id INTO _club_id FROM public.readings WHERE id = _id;
            WHEN 'members' THEN
                SELECT club_id INTO _club_id FROM public.members WHERE id = _id;
            WHEN 'polls' THEN
                SELECT club_id INTO _club_id FROM public.polls WHERE id = _id;
            WHEN 'poll_items' THEN
                SELECT poll_id INTO _club_id FROM public.poll_items WHERE id = _id;
                SELECT club_id INTO _club_id FROM public.polls WHERE id = _club_id;
            WHEN 'poll_votes' THEN
                SELECT poll_item_id INTO _club_id FROM public.poll_votes WHERE id = _id;
                SELECT poll_id INTO _club_id FROM public.poll_items WHERE id = _club_id;
                SELECT club_id INTO _club_id FROM public.polls WHERE id = _club_id;
            WHEN 'intervals' THEN
                SELECT reading_id INTO _club_id FROM public.intervals WHERE id = _id;
                SELECT club_id INTO _club_id FROM public.readings WHERE id = _club_id;
            WHEN 'member_interval_progresses' THEN
                SELECT interval_id INTO _club_id FROM public.member_interval_progresses WHERE id = _id;
                SELECT reading_id INTO _club_id FROM public.intervals WHERE id = _club_id;
                SELECT club_id INTO _club_id FROM public.readings WHERE id = _club_id;
            WHEN 'posts' THEN
                SELECT reading_id INTO _club_id FROM public.posts WHERE id = _id;
                SELECT club_id INTO _club_id FROM public.readings WHERE id = _club_id;
            WHEN 'comments' THEN
                SELECT post_id INTO _club_id FROM public.comments WHERE id = _id;
                SELECT reading_id INTO _club_id FROM public.posts WHERE id = _club_id;
                SELECT club_id INTO _club_id FROM public.readings WHERE id = _club_id;
            WHEN 'likes' THEN
                SELECT post_id INTO _club_id FROM public.likes WHERE id = _id;
                IF _club_id IS NULL THEN
                    SELECT comment_id INTO _club_id FROM public.likes WHERE id = _id;
                    SELECT post_id INTO _club_id FROM public.comments WHERE id = _club_id;
                    SELECT reading_id INTO _club_id FROM public.posts WHERE id = _club_id;
                    SELECT club_id INTO _club_id FROM public.readings WHERE id = _club_id;
                ELSE
                    SELECT reading_id INTO _club_id FROM public.posts WHERE id = _club_id;
                    SELECT club_id INTO _club_id FROM public.readings WHERE id = _club_id;
                END IF;
            WHEN 'member_roles' THEN
                SELECT member_id INTO _club_id FROM public.member_roles WHERE id = _id;
                SELECT club_id INTO _club_id FROM public.members WHERE id = _club_id;
            ELSE
                RAISE EXCEPTION 'Invalid permission: %', table_name;
        END CASE;
    END IF;
    RETURN _club_id;
END;$function$
;

grant delete on table "public"."poll_items" to "anon";

grant insert on table "public"."poll_items" to "anon";

grant references on table "public"."poll_items" to "anon";

grant select on table "public"."poll_items" to "anon";

grant trigger on table "public"."poll_items" to "anon";

grant truncate on table "public"."poll_items" to "anon";

grant update on table "public"."poll_items" to "anon";

grant delete on table "public"."poll_items" to "authenticated";

grant insert on table "public"."poll_items" to "authenticated";

grant references on table "public"."poll_items" to "authenticated";

grant select on table "public"."poll_items" to "authenticated";

grant trigger on table "public"."poll_items" to "authenticated";

grant truncate on table "public"."poll_items" to "authenticated";

grant update on table "public"."poll_items" to "authenticated";

grant delete on table "public"."poll_items" to "service_role";

grant insert on table "public"."poll_items" to "service_role";

grant references on table "public"."poll_items" to "service_role";

grant select on table "public"."poll_items" to "service_role";

grant trigger on table "public"."poll_items" to "service_role";

grant truncate on table "public"."poll_items" to "service_role";

grant update on table "public"."poll_items" to "service_role";

grant delete on table "public"."poll_votes" to "anon";

grant insert on table "public"."poll_votes" to "anon";

grant references on table "public"."poll_votes" to "anon";

grant select on table "public"."poll_votes" to "anon";

grant trigger on table "public"."poll_votes" to "anon";

grant truncate on table "public"."poll_votes" to "anon";

grant update on table "public"."poll_votes" to "anon";

grant delete on table "public"."poll_votes" to "authenticated";

grant insert on table "public"."poll_votes" to "authenticated";

grant references on table "public"."poll_votes" to "authenticated";

grant select on table "public"."poll_votes" to "authenticated";

grant trigger on table "public"."poll_votes" to "authenticated";

grant truncate on table "public"."poll_votes" to "authenticated";

grant update on table "public"."poll_votes" to "authenticated";

grant delete on table "public"."poll_votes" to "service_role";

grant insert on table "public"."poll_votes" to "service_role";

grant references on table "public"."poll_votes" to "service_role";

grant select on table "public"."poll_votes" to "service_role";

grant trigger on table "public"."poll_votes" to "service_role";

grant truncate on table "public"."poll_votes" to "service_role";

grant update on table "public"."poll_votes" to "service_role";

grant delete on table "public"."polls" to "anon";

grant insert on table "public"."polls" to "anon";

grant references on table "public"."polls" to "anon";

grant select on table "public"."polls" to "anon";

grant trigger on table "public"."polls" to "anon";

grant truncate on table "public"."polls" to "anon";

grant update on table "public"."polls" to "anon";

grant delete on table "public"."polls" to "authenticated";

grant insert on table "public"."polls" to "authenticated";

grant references on table "public"."polls" to "authenticated";

grant select on table "public"."polls" to "authenticated";

grant trigger on table "public"."polls" to "authenticated";

grant truncate on table "public"."polls" to "authenticated";

grant update on table "public"."polls" to "authenticated";

grant delete on table "public"."polls" to "service_role";

grant insert on table "public"."polls" to "service_role";

grant references on table "public"."polls" to "service_role";

grant select on table "public"."polls" to "service_role";

grant trigger on table "public"."polls" to "service_role";

grant truncate on table "public"."polls" to "service_role";

grant update on table "public"."polls" to "service_role";

create policy "Members can create poll items"
on "public"."poll_items"
as permissive
for insert
to authenticated
with check ((authorize(( SELECT auth.uid() AS uid), poll_id, 'poll_items.create'::text) AND (creator_member_id IS NOT NULL) AND user_is_member(( SELECT auth.uid() AS uid), creator_member_id) AND (EXISTS ( SELECT 1
   FROM polls
  WHERE ((polls.id = poll_items.poll_id) AND (polls.is_locked = false))))));


create policy "Members can delete their own poll items"
on "public"."poll_items"
as permissive
for delete
to authenticated
using ((authorize(( SELECT auth.uid() AS uid), id, 'poll_items.delete.own'::text) AND user_is_member(( SELECT auth.uid() AS uid), creator_member_id)));


create policy "Members can read poll items"
on "public"."poll_items"
as permissive
for select
to authenticated
using (authorize(( SELECT auth.uid() AS uid), id, 'poll_items.read'::text));


create policy "Moderators can delete poll items"
on "public"."poll_items"
as permissive
for delete
to authenticated
using (authorize(( SELECT auth.uid() AS uid), id, 'poll_items.delete'::text));


create policy "Members can create poll votes"
on "public"."poll_votes"
as permissive
for insert
to authenticated
with check ((authorize(( SELECT auth.uid() AS uid), poll_item_id, 'poll_votes.create'::text) AND (member_id IS NOT NULL) AND user_is_member(( SELECT auth.uid() AS uid), member_id)));


create policy "Members can delete their own poll votes"
on "public"."poll_votes"
as permissive
for delete
to authenticated
using ((authorize(( SELECT auth.uid() AS uid), id, 'poll_votes.delete.own'::text) AND user_is_member(( SELECT auth.uid() AS uid), member_id)));


create policy "Members can read poll votes"
on "public"."poll_votes"
as permissive
for select
to authenticated
using (authorize(( SELECT auth.uid() AS uid), id, 'poll_votes.read'::text));


create policy "Admins can create polls"
on "public"."polls"
as permissive
for insert
to authenticated
with check ((authorize(( SELECT auth.uid() AS uid), club_id, 'polls.create'::text) AND (creator_member_id IS NOT NULL) AND user_is_member(( SELECT auth.uid() AS uid), creator_member_id) AND (is_finished = false)));


create policy "Admins can delete polls"
on "public"."polls"
as permissive
for delete
to authenticated
using (authorize(( SELECT auth.uid() AS uid), id, 'polls.delete'::text));


create policy "Admins can read all polls"
on "public"."polls"
as permissive
for select
to authenticated
using (authorize(( SELECT auth.uid() AS uid), id, 'polls.read.all'::text));


create policy "Admins can update polls"
on "public"."polls"
as permissive
for update
to authenticated
using (authorize(( SELECT auth.uid() AS uid), id, 'polls.update'::text))
with check ((user_is_member(( SELECT auth.uid() AS uid), editor_member_id) AND cls_polls(id, created_at, club_id, end_date, creator_member_id, is_finished)));


create policy "Members can read current polls"
on "public"."polls"
as permissive
for select
to authenticated
using ((authorize(( SELECT auth.uid() AS uid), id, 'polls.read'::text) AND (is_archived = false)));


create policy "Members can create likes"
on "public"."likes"
as permissive
for insert
to authenticated
with check ((((comment_id IS NOT NULL) AND (authorize(( SELECT auth.uid() AS uid), comment_id, 'likes.create'::text) AND (member_id IS NOT NULL) AND user_is_member(( SELECT auth.uid() AS uid), member_id))) OR (authorize(( SELECT auth.uid() AS uid), post_id, 'likes.create'::text) AND (member_id IS NOT NULL) AND user_is_member(( SELECT auth.uid() AS uid), member_id))));


create policy "Members can read current readings"
on "public"."readings"
as permissive
for select
to authenticated
using (authorize(( SELECT auth.uid() AS uid), id, 'readings.read'::text));


CREATE TRIGGER decrement_votes_count_upon_vote_deletion AFTER DELETE ON public.poll_votes FOR EACH ROW EXECUTE FUNCTION handle_poll_vote_deletion();

CREATE TRIGGER increment_votes_count_upon_new_vote AFTER INSERT ON public.poll_votes FOR EACH ROW EXECUTE FUNCTION handle_new_poll_vote();


